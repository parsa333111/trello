networks:
  web-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1

volumes:
  postgres-data:


services:
  backend:
    build: ./backend/
    image: backend:0.1.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - 8081:8081
    networks:
      web-network:
        ipv4_address: 10.5.0.2
    environment:
      - LISTEN_ADDRESS=0.0.0.0:8081
      - PQ_HOST=10.5.0.3
      - PQ_PORT=5432
      - PQ_USER=backend
      - PQ_PASSWORD=password
      - PQ_DBNAME=backend
      - REDIS_HOST=10.5.0.7
      - REDIS_PORT=6379

  postgres:
    image: postgres:16.3-alpine3.20
    ports:
      - 5432:5432
    networks:
      web-network:
        ipv4_address: 10.5.0.3
    environment:
      - POSTGRES_USER=backend
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=backend
    volumes:
      - postgres-data:/mnt/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U backend -d backend" ]
      interval: 10s
      timeout: 10s
      retries: 40

  prometheus:
    image: prom/prometheus:v2.52.0
    ports:
      - 9090:9090
    networks:
      web-network:
        ipv4_address: 10.5.0.4
    volumes:
      - ./assets/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.4.3
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    networks:
      web-network:
        ipv4_address: 10.5.0.5
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./assets/prometheus-datasource.yml:/etc/grafana/provisioning/datasources/prometheus-datasource.yml

  nginx:
    image: nginx:1.26.1
    depends_on:
      - backend
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./assets/nginx.conf:/etc/nginx/nginx.conf
      - ./assets/certs:/etc/nginx/certs
      - ./frontend/dist:/usr/share/nginx/html
    networks:
      web-network:
        ipv4_address: 10.5.0.6

  redis:
    image: redis:7.2.5
    ports:
      - "6379:6379"
    networks:
      web-network:
        ipv4_address: 10.5.0.7
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
